function(entry){as.numeric(sub("benchmark_l1_error_([0-9]+).*", "\\1",
entry))})
colnames(test_bench)
colnames(test_bench)[ncol(test_bench)-1] = "Error_bench"
colnames(test_bench)
test1 = pivot_longer(res0 %>%
select(-starts_with("benchmark_l1_"))%>%
select(lambda, beta_epid, gamma_epid, alpha_fp,
dc_heterogeneity, steps, heterogeneity_rates, nb_init, p_norm, mode,
diffuse, propagation, starts_with("l1_")),
cols =  starts_with("l1_"))
test1["time"] = sapply(test1$name,
function(entry){as.numeric(sub("l1_error_([0-9]+).*", "\\1",
entry))})
colnames(test1)[ncol(test1)-1] = "Error"
colnames(test1)
setdiff(colnames(test1), c("Error"))
test1$name
setdiff(colnames(test1), c("Error", "name"))
test_merged = merge(test1 %>% select(-name), test_bench%>% select(-name),
by = setdiff(colnames(test1), c("Error", "name")))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.001,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
colnames(test_bench)
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.001,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_line(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.001,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_line(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
scale_x_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.001,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_line(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.001,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.001,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1) %>% filter(time == 1)
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free_y", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
#scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
#scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)) %>%
group_by(time, r0, diffuse) %>%
summarise(Error_bench=mean(Error_bench)),
aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
#scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(data=test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)) %>%
group_by(time, r0, diffuse) %>%
summarise(Error_bench=mean(Error_bench)),
aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
#scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(data=test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
lambda  < 0.01,
lambda>0.001,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)) %>%
group_by(time, r0, diffuse) %>%
summarise(Error_bench=mean(Error_bench)),
aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
#scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)),
aes(x=time, y = Error, color = as.factor(lambda))) +
geom_line() +
geom_point(data=test_merged %>% filter(#power_pa == 1.2,
#gamma_epid == 0.1,
alpha_fp == 0.01,
#diffuse==10,
propagation == "true_p",
p_norm == 1,
lambda  < 0.01,
lambda>0.001,
gamma_epid == 0.01,
beta_epid != 0.5,
nb_init == 1)%>%
mutate( r0 = paste0( "R0 = ", beta_epid/gamma_epid)) %>%
group_by(time, r0, diffuse) %>%
summarise(Error_bench=mean(Error_bench)),
aes(x=time, y=Error_bench, color = "benchmark"))+
facet_wrap(r0~diffuse,
scales = "free", ncol = 3)+
xlab("Time") +
ylab(expression(italic(l[1]) ~ "error")) +
labs(colour="Comparison") +
#scale_x_log10() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
N=1000
beta_epid=90
gamma_epid = 0.1
beta_epid=0.9
nb_init=1
dc_heterogeneity =1
heterogeneity_rates = "none"
steps = 200
diffuse = 200
propagation = "true_p"
alpha_fp = 0.01
proba_between <- 0.0005
proba_within <- 0.005
nb_blocks  <- 3
do_plot <- FALSE
B <-  matrix(proba_between, nb_blocks, nb_blocks)
diag(B) <- rep(proba_within, nb_blocks)
p_norm <- 1
mode <- "denoise"
do_plot <- FALSE #TRUE
if (dc_heterogeneity == "none"){
dc_vector = rep(1, N)
} else{
dc_vector = rexp(1/as.numeric(dc_heterogeneity), n=N)
}
dc_vector
dc_heterogeneity
lambdas <- 10^(seq(from = -5, to = -1, length.out = 30))
# Create random graph
dcsbm_graph <- dcsbm(
n = NULL,
theta = dc_vector,
B = B,
sort_nodes = TRUE,
allow_self_loops = FALSE,
poisson_edges = FALSE
)
library(tidyverse)
library(igraph)
library(fastRG)
source("graph_utils.R")
source("experiments/evaluate_solution.R")
source("experiments/simulate_epidemic.R")
source("r/solvers/cvx_solver.R")
# Create random graph
dcsbm_graph <- dcsbm(
n = NULL,
theta = dc_vector,
B = B,
sort_nodes = TRUE,
allow_self_loops = FALSE,
poisson_edges = FALSE
)
edgelist <- sample_edgelist(dcsbm_graph)
g <- igraph::graph_from_edgelist(as.matrix(edgelist), directed=FALSE)
g = subgraph(g, vids = (1:vcount(g))[components(g)$membership == 1])
n <- vcount(g)
layout <- layout_with_mds(g)
plot(g, layout = layout, vertex.size = 4,
edge.arrow.size = 0, vertex.label = NA,
vertex.color = V(g)$color)
beta_v <- rep(beta_epid, n)
### Turn the infection rates into a vector
if (is.null(heterogeneity_rates) || heterogeneity_rates == "none") {
beta_v <- rep(beta_epid, n)
gamma_v <- rep(gamma_epid, n)
} else {
if (heterogeneity_rates == "uniform") {
beta_v <- runif(beta_epid / 2, min(3 * beta_epid / 2, 1), n = n)
gamma_v <- runif(gamma_epid / 2, min(3 * gamma_epid / 2, 1), n = n)
} else {
beta_v <- rexp(1 / beta_epid, n = n)  ### turn into a vector
gamma_v <- rexp(1 / gamma_epid, n = n)
}
}
gamma_v
graph_attributes <- get_edge_incidence(g, beta_v, graph = "PA",
weight = 1)
# Assign initial patients
y_init <- rep(0, n)
subject_0 <- sample(1:n, nb_init)
y_init[subject_0] <- 1
# Record statistics on the initial patients
d <- degree(g, v = subject_0,
mode = "total", loops = TRUE,
normalized = FALSE)
btw <- betweenness(g, v = subject_0)
cls <- closeness(g, v = subject_0)
diffuse
state <- simulate_epidemic(graph_attributes$W,
y_init = y_init,
beta_v = beta_v,
gamma_v = gamma_v,
steps = diffuse,
propagate = propagation,
alpha_fp = alpha_fp)
steps =20
state$track_state[, steps]
max(state$track_state[, steps])
y_obs <- sapply(y_prob, function(x) { rbinom(1, 1, min(alpha_fp + x, 1)) })
y_prob = state$track_state[, steps]
y_obs <- sapply(y_prob, function(x) { rbinom(1, 1, min(alpha_fp + x, 1)) })
y_obs
alpha_fp
diffuse-steps
# Propagate benchmark
prop_benchmark <- propagate_solution(graph_attributes$W, y_obs,
state$beta_v, state$gamma_v, diffuse-steps)
diffuse
state$track_state[, diffuse]
data(Snow.deaths)
data(Snow.pumps)
data(Snow.streets)
data(Snow.polygons)
data(Snow.deaths)
## Plot deaths over time
require(lubridate)
clr <- ifelse(Snow.dates$date < mdy("09/08/1854"), "red", "darkgreen")
library(highr)
library(HistDat)
library(HistData)
data(Snow.deaths)
data(Snow.pumps)
data(Snow.streets)
data(Snow.polygons)
data(Snow.deaths)
## Plot deaths over time
require(lubridate)
clr <- ifelse(Snow.dates$date < mdy("09/08/1854"), "red", "darkgreen")
plot(deaths ~ date, data=Snow.dates, type="h", lwd=2, col=clr)
points(deaths ~ date, data=Snow.dates, cex=0.5, pch=16, col=clr)
text( mdy("09/08/1854"), 40, "Pump handle\nremoved Sept. 8", pos=4)
## draw Snow's map and data
SnowMap()
# add polygons
SnowMap(polygons=TRUE, main="Snow's Cholera Map with Pump Polygons")
# zoom in a bit, and show density estimate
SnowMap(xlim=c(7.5,16.5), ylim=c(7,16), polygons=TRUE, density=TRUE,
main="Snow's Cholera Map, Annotated")
## re-do this the sp way... [thx: Stephane Dray]
library(sp)
# streets
slist <- split(Snow.streets[,c("x","y")],as.factor(Snow.streets[,"street"]))
Ll1 <- lapply(slist,Line)
Lsl1 <- Lines(Ll1,"Street")
Snow.streets.sp <- SpatialLines(list(Lsl1))
plot(Snow.streets.sp, col="gray")
title(main="Snow's Cholera Map of London (sp)")
